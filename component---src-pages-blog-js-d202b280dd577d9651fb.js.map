{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/author.js","webpack://gatsby-starter-blog/./src/pages/blog.js"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","medium","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"k6BAiDA,IA7Ce,WAAO,IAAD,IACXA,GAAOC,oBAAe,cAgBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACI,uBAAKC,UAAU,UACX,gBAAC,EAAAC,EAAD,CACID,UAAU,gBACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARR,uBAUCZ,aAAA,EAAAA,EAAQa,OACL,uCACe,8BAASb,EAAOa,MAD/B,KAC+Cb,aAAA,EAAAA,EAAQc,UAAW,KADlE,IAGI,qBAAGC,KAAI,wBAAwBZ,aAAA,EAAAA,EAAQa,SAAR,KAA/B,wC,8FCyBpB,UA1DiB,SAAC,GAAwB,IAAD,EAArBlB,EAAqB,EAArBA,KAAMmB,EAAe,EAAfA,SAClBC,GAAY,UAAApB,EAAKG,KAAKC,oBAAV,eAAwBiB,QAAxB,QACZC,EAAQtB,EAAKuB,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,sBAAIK,MAAO,CAAEC,UAAU,SACpBL,EAAMM,KAAI,SAAAC,GACT,IAAMR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACE1B,UAAU,iBACV4B,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAYjB,KAG/B,6BAAQQ,EAAKC,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS","file":"component---src-pages-blog-js-d202b280dd577d9651fb.js","sourcesContent":["import * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nconst Author = () => {\r\n    const data = useStaticQuery(graphql`\r\n      query AuthorQuery {\r\n        site {\r\n            siteMetadata {\r\n              author {\r\n                name\r\n                summary\r\n              }\r\n              social {\r\n                medium\r\n              }\r\n            }\r\n          }\r\n      }\r\n    `)\r\n\r\n    const author = data.site.siteMetadata?.author\r\n    const social = data.site.siteMetadata?.social\r\n\r\n    return (\r\n        <div className=\"author\">\r\n            <StaticImage\r\n                className=\"author-avatar\"\r\n                layout=\"fixed\"\r\n                formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\r\n                src=\"../images/profile-pic.png\"\r\n                width={50}\r\n                height={50}\r\n                quality={95}\r\n                alt=\"Profile picture\"\r\n            />\r\n            {author?.name && (\r\n                <p>\r\n                    Written by <strong>{author.name}</strong> {author?.summary || null}\r\n                    {` `}\r\n                    <a href={`https://medium.com/${social?.medium || ``}`}>\r\n                        You should follow them on Medium\r\n            </a>\r\n                </p>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Author","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Author from \"../components/author\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\nconst BlogPage = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const posts = data.allMarkdownRemark.nodes\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <Layout location={location} title={siteTitle}>\r\n        <SEO title=\"All posts\" />\r\n        <Author />\r\n        <p>\r\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\r\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\r\n          gatsby-config.js).\r\n        </p>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <SEO title=\"All posts\" />\r\n      <Author />\r\n      <ol style={{ listStyle: `none` }}>\r\n        {posts.map(post => {\r\n          const title = post.frontmatter.title || post.fields.slug\r\n\r\n          return (\r\n            <li key={post.fields.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <header>\r\n                  <h2>\r\n                    <Link to={post.fields.slug} itemProp=\"url\">\r\n                      <span itemProp=\"headline\">{title}</span>\r\n                    </Link>\r\n                  </h2>\r\n                  <small>{post.frontmatter.date}</small>\r\n                </header>\r\n                <section>\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: post.frontmatter.description || post.excerpt,\r\n                    }}\r\n                    itemProp=\"description\"\r\n                  />\r\n                </section>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPage\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          title\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}